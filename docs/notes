DISPERSY:

Stored messages are sent immediately when a dispersy introduction response is sent. If multiple endpoints have the same peer, 
this will result in duplicate messages sent. Are multiple introduction messages necessary? (NAT problems?) 
Perhaps send puncture requests instead.

MultiEndpoint, at this point, holds all information on downloads in self.downloads. 
The download_impl is stored there as well, giving it a lifetime beyond the swift instance download_impl.
SwiftEndpoints have no access to this information for now.

FIXME: MySwiftProcess causes the logs to go haywire. Temporary fix for now is to import this class earlier.

Regardless of what MultiEndpoint says.. Every download in Libswift is leech and seed, since peers will be found via the PEX messages.
At least if they now about those swarms. But even so, MultiEndpoint should still distinguish them because otherwise cleaning up
would be difficult. Perhaps introduce boolean, delete after complete.

If an introduction message does not arrive, is not read, or whatever, there are no timeouts to send again.

Started on providing IPv6 capabilities. Swift instances should be able to handle it.. (Needs testing)
Dispersy itself will be a problem most likely.
Address class should be used more in Endpoint. 

LIBSWIFT:

AddPeer in content.cpp now connects all sockets to all peers

If both eth and wlan are available, a UDP socket will switch between both, depending on the destination address, each sendto.
Perhaps it is good to choose a single interface for each socket. This will create problems with NAT traversal.
http://stackoverflow.com/questions/12371385/how-to-specify-which-interface-to-use-for-a-socket-in-linux



GENERAL:

Tests are necessary to see if multiple channels really perform better. And if improvements can be made.

TESTING:

How to drop packets in Linux..
http://sandilands.info/sgordon/dropping-packets-in-ubuntu-linux-using-tc-and-iptables

ethtool - get all the network interface card parameters (status of the link, speed, offload parameters...)