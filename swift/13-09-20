cmdgw.cpp

#include "swift.h"
//#include "swarmmanager.h"
#include <event2/buffer.h>
#include <event2/bufferevent.h>
#include <event2/listener.h>

#include <iostream>
#include <sstream>
//#include <pthread.h>

Line 677:

struct map_and_store {
	MmapHashTree *mmap;
	Storage *st;
	map_and_store() {}
	map_and_store(MmapHashTree *m, Storage *s) : mmap(m), st(s) {}
};


static void *LoopHelper(void *mas) {
	map_and_store *ms = (map_and_store *) mas;
	MmapHashTree *m = ms->mmap;
	Storage *s = ms->st;
	return m->Loop(s);
}


Line 863:

	// Create separate thread to update status from files
	    pthread_t mythread;
	    SwarmData *sd = SwarmManager::GetManager().FindSwarm(req->td);
	    if (sd == NULL) {
	    	fprintf(stderr, "No SwarmData\n");
	    } else {
			FileTransfer *ft = (*sd).GetTransfer(true);
			if (ft == NULL) {
				fprintf(stderr, "No FileTransfer\n");
			} else {
				MmapHashTree *mmap = (MmapHashTree *) (*ft).hashtree();
				if (mmap == NULL) {
					fprintf(stderr, "No HashTree\n");
				} else {
					Storage *st = mmap->get_storage();
					map_and_store ms = map_and_store(mmap, st);
					int rc = pthread_create(&mythread, NULL, LoopHelper, (&ms));
					if (rc){
					   fprintf(stderr, "Helas, Pthread could not be created.\n");
					}
				}
			}
	    }


---------------------------------------------------------------------------------------

hashtree.cpp

void *MmapHashTree::Loop(Storage *storage) {
	while (true) {
		sleep(1);
		fprintf(stderr, "Submitting!\n");
		storage_ = storage;
		Submit();
	}
	return 0;
}

----------------------------------------------------------------------------------------

hashtree.h

public:

    void 			*Loop(Storage *storage);